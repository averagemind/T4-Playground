<#@ template language="C#" hostspecific="True" debug="True" #>
<#@ output extension="/" #>
<#@ include file="CodeTemplates\Manager.ttinclude" once="True" #>

<#@ import namespace="Extensions" #>
<#@ assembly name="$(ProjectDir)bin\Debug\Extensions.dll" #>

<#
////////////////////////////////////////////////////////////////////////////////
///// main section
////////////////////////////////////////////////////////////////////////////////
System.Diagnostics.Debugger.Launch();
var manager = Manager.Create(Host, GenerationEnvironment);

foreach (var fileName in GetXmlFileNames())
{
	//System.Diagnostics.Debugger.Launch();
    var xDoc = XDocument.Load(fileName);
    var controllers = xDoc.Controllers();

    foreach (var controller in controllers)
    {
        var actions = controller.Actions();
        foreach (var action in actions)
        {
            var className = string.Format("{0}_{1}Tests", controller.Attribute("name").Value, action.Attribute("name").Value);
    
	        manager.StartNewFile(string.Format("{0}.generated.cs", className));
            //GenerateHeader(manager, className);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;

using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace T4_Toolbox_Experiements
{
	[TestClass]
	public class <#=className#> : InMemoryHosting
	{
<#
            foreach (var path in action.Paths())
            {
                var testMethodName = path.Attribute("name").Value;
                var inputParams = path.Descendants("Setups").First().Descendants().ToList();
                var outputParams = path.Descendants("Expects").First().Descendants().ToList();
#>

		[TestMethod]
		public void <#=testMethodName#>()
		{
			var request = new <#=testMethodName#>Request
			{
<#
				foreach (var inputParam in inputParams)
				{
#>
				<#=inputParam.Attribute("name").Value#> = "<#=inputParam.Value#>",
<#
				}
#>
			};
			var response = new <#=testMethodName#>Response
			{
<#
				foreach (var outputParam in outputParams)
				{
#>
				<#=outputParam.Attribute("name").Value#> = "<#=outputParam.Value#>",
<#
				}
#>
			};
		}
<#
            }

#>
	}
}
<#
            manager.EndBlock();
        }
    }
}

manager.Process(true);

#>
}

<#+
////////////////////////////////////////////////////////////////////////////////
///// helpers section
////////////////////////////////////////////////////////////////////////////////
private IEnumerable<string> GetXmlFileNames()
{
    var path = Host.ResolvePath("Resources");
    return Directory.GetFiles(path, "*Tests.xml");
}
#>
